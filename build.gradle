plugins {
    id 'java'
    id 'maven-publish'
}

group = 'is.yarr.qilletni.docgen'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()

    maven {
        url = "https://maven.pkg.github.com/rubbaboy/Qilletni"
        credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

java {
    withSourcesJar()
    sourceCompatibility = '22'
    targetCompatibility = '22'
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation ('org.thymeleaf:thymeleaf:3.1.2.RELEASE') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compileOnly 'is.yarr.qilletni:qilletni:1.0.0-SNAPSHOT'
    compileOnly 'is.yarr.qilletni:qilletni:1.0.0-SNAPSHOT:sources'

    compileOnly 'is.yarr.qilletni.api:qilletni-api:1.0.0-SNAPSHOT'

    // For markdown parsing
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'

    // For caching scanned libraries
    implementation 'org.msgpack:msgpack-core:0.8.3'
    
    // For generating an index
    compileOnly 'com.google.code.gson:gson:2.10.1'

    // SLF4J API dependency
    implementation 'org.apache.logging.log4j:log4j-api:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.22.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/rubbaboy/QilletniDocgen"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

test {
    useJUnitPlatform()
}

tasks.compileJava {
    doFirst {
        def fullClasspath = sourceSets.main.compileClasspath.asPath
        options.compilerArgs = ['--module-path', fullClasspath, ]
        classpath = files()
    }
}


tasks.register('generateHtml', JavaExec) {
    mainClass = 'is.yarr.qilletni.docgen.Main'
    classpath = sourceSets.main.runtimeClasspath
}
